[{"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\index.js":"1","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\reportWebVitals.js":"2","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\field.js":"3","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Profile.js":"4","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\public-route.js":"5","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\private-route.js":"6","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\common.js":"7","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Login.js":"8","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Home.js":"9","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\App.js":"10"},{"size":303,"mtime":1614765870178,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1232,"mtime":1589192469066,"results":"14","hashOfConfig":"12"},{"size":20425,"mtime":1615509567612,"results":"15","hashOfConfig":"12"},{"size":403,"mtime":1614249699562,"results":"16","hashOfConfig":"12"},{"size":439,"mtime":1588768401993,"results":"17","hashOfConfig":"12"},{"size":703,"mtime":1589377015363,"results":"18","hashOfConfig":"12"},{"size":12442,"mtime":1615459382726,"results":"19","hashOfConfig":"12"},{"size":40923,"mtime":1615458154526,"results":"20","hashOfConfig":"12"},{"size":980,"mtime":1615262807458,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"nrgzpo",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\index.js",[],["46","47"],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\reportWebVitals.js",[],["48","49"],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\field.js",[],["50","51"],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Profile.js",["52"],"import React from 'react';\nimport axios from 'axios';\nimport { isMobile } from 'react-device-detect';\nimport { getToken, removeUserSession } from './utils/common';\n\nimport { Popup, Item, Message, Button, Dropdown, Input, Segment, Image, Grid, Icon } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport validator from 'validator';\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      apihost: 'http://bskild.xyz/v1',\n      //apihost: 'http://127.0.0.1:8888/v1',      \n      token: getToken(),\n      userid: '',\n      email: '',\n      firstname: '',\n      lastname: '',\n      countrycode: '',\n      countryname: '',\n      statename: '',\n      countries: [],\n      states: [],\n      isfirstnamevalid: true,\n      islastnamevalid: true,\n      userinfoupdatemsg: '',\n      userinfoupdateok: true,\n      userprofile: [],\n      usercareer: {}\n    };\n  }\n\n  logout(){\n    removeUserSession();\n    this.props.history.push('/home');\n  }\n\n  async validateusertoken(){\n    try{\n      const requeststr = this.state.apihost + '/users/auth'\n      const response = await axios.get(requeststr,\n        {\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-token\": this.state.token\n          }\n        }\n      );\n      console.log('validate user [' + response.data['message'] + ']');\n      this.setState({userid: response.data['users'][0]['userid']})\n      this.setState({email: response.data['users'][0]['email']})\n      this.setState({firstname: response.data['users'][0]['firstname']})\n      this.setState({lastname: response.data['users'][0]['lastname']})\n      await this.setState({countryname: response.data['users'][0]['countryname']})\n      await this.setState({countrycode: response.data['users'][0]['countrycode']})\n      await this.filterstatesdata(this.state.countrycode);\n      await this.setState({statename: response.data['users'][0]['statename']})\n      await this.setState({userprofile: response.data['users'][0]['occupations']})\n      this.loadusercareer(this.state.userprofile);      \n    }\n    catch(err){\n      if(err.response){\n        if(err.response.status === 401){\n          removeUserSession();\n          this.props.history.push('/home');\n        }\n        else{\n          console.log('validate user [' + err.response + ']');\n        }\n      }\n    }  \n  }\n\n  loadusercareer(userprofile){\n    let occupations = [];\n    let occupationexisted = [];\n\n    let hasnullinstance = {};      \n    _.each(userprofile, (item, i) => {\n      const occid = item.occupationid;  \n      let careerinstance = {};\n      careerinstance['instanceid'] = item.instanceid;\n      careerinstance['company'] = item.company;\n      careerinstance['datefrom'] = item.datefrom;\n      careerinstance['dateto'] = item.dateto;\n      if(!(occid in hasnullinstance) && item.company === ''){\n        hasnullinstance[occid] = true;\n      }\n      else if(!(occid in hasnullinstance)){\n        hasnullinstance[occid] = false;\n      }\n\n      if(occupationexisted.includes(occid)){\n        let obj = occupations.find(o => o.id === occid);\n        obj['instances'].push(careerinstance);\n        occupations = occupations.filter(function( obj ) {\n          return obj.id !== occid;\n        });\n        occupations.push(obj);\n      }\n      else{\n        let occupation = {}\n        occupation['id'] = occid;\n        occupation['name'] = item.name;\n        occupation['instances'] = [careerinstance];\n\n        occupations.push(occupation);\n        occupationexisted.push(occid);\n      }\n      \n    });\n\n    _.each(hasnullinstance, (value, occid) => {\n      console.log(occid + '-' + value);\n      let careerinstancenew = {};\n      careerinstancenew['instanceid'] = '0';\n      careerinstancenew['company'] = '';\n      careerinstancenew['datefrom'] = '';\n      careerinstancenew['dateto'] = '';\n\n      if(!value){\n        let allotheroccupations = occupations.filter(function( obj ) {\n          return obj.id !== occid;\n        });\n\n        let targetoccupation = occupations.filter(function( obj ) {\n          return obj.id === occid;\n        });\n\n        targetoccupation[0]['instances'].push(careerinstancenew);\n        occupations = [...allotheroccupations, ...targetoccupation];\n      }\n\n    });\n\n\n    this.setState({usercareer: occupations});\n  }\n\n  async handledatechange(datetype,occupationid,instanceid){\n    const datefromfieldid = datetype + '-' + occupationid + '-' + instanceid;\n    let datefrom = document.getElementById(datefromfieldid).value;\n    console.log(datefrom);\n\n    if(/^[\\d]{0,4}(?:-\\d{0,2}){0,2}$/.test(datefrom)){\n      let careerobj = this.state.usercareer;\n\n      if(/^\\d{4}-\\d{2}$/.test(datefrom)){\n        datefrom = datefrom + '-01';\n      }\n      else if(/^\\d{4}-\\d{2}-$/.test(datefrom)){\n        datefrom = datefrom + '01';\n      }\n      else if(/^\\d{4}-\\d{2}-0$/.test(datefrom)){\n        datefrom = datefrom + '1';\n      }\n\n      careerobj[occupationid]['instances'][instanceid][datetype] = datefrom;\n      await this.setState({usercareer: careerobj});\n      console.log(this.state.usercareer);\n      console.log(\"isdate\");\n    }\n  }\n  \n  async updatecareerdata(occupationid){\n    const occupationtoupdate = this.state.usercareer.filter(function( obj ) {\n      return obj.id === occupationid;\n    });\n    \n    try{\n      const requeststr = this.state.apihost + '/users/career/' + occupationid\n      const response = await axios.post(requeststr,\n        occupationtoupdate, \n        {\n          headers: {\n            'crossDomain': true,\n            \"content-type\": \"application/json\",\n            \"access-token\": this.state.token\n          }\n        }\n      );\n      console.log('update user career [' + response.data['message'] + ']');\n      console.log('savepopup-' + occupationid);\n      this.validateusertoken();\n    }\n    catch(err){\n      console.log('update user career [' + err + ']');\n    }  \n  }\n\n  async deletecareerrow(occupationid,instanceid){\n    try{\n      const requeststr = this.state.apihost + '/users/career/' + occupationid + '/' + instanceid\n      const response = await axios.delete(requeststr,\n        {\n          headers: {\n            'crossDomain': true,\n            \"content-type\": \"application/json\",\n            \"access-token\": this.state.token\n          }\n        }\n      );\n      console.log('delete user career instance [' + response.data['message'] + ']');\n      this.validateusertoken();\n      \n    }\n    catch(err){\n      console.log('delete user career instance [' + err + ']');     \n     }  \n  }\n\n  async handlecompanychange(occupationid,instanceid){\n    const companyfieldid = 'company-' + occupationid + '-' + instanceid;\n    const companyname = document.getElementById(companyfieldid).value;\n    let careerobj = this.state.usercareer;\n    careerobj[occupationid]['instances'][instanceid]['company'] = companyname;\n    await this.setState({usercareer: careerobj});\n    console.log(this.state.usercareer);\n  }\n\n  renderusercareer(){\n    let usercareerpanel = [];\n\n    _.each(this.state.usercareer, (item, i) => {\n      usercareerpanel.push(\n          <Item key={item.id}>\n            <Item.Content>\n              <Item.Header>\n                <span className='actionlink'>\n                  <a href={'/home?q=' + item.id + '&m=o'}>\n                  {item.name}\n                  </a>\n                </span>\n                { ' ' }\n                <Popup className='popup' inverted flowing hoverable\n                  content='Save your changes'\n                  trigger={\n                    <Icon name='save' size='small' link\n                      color='green'\n                      onClick={this.updatecareerdata.bind(this,item.id)}\n                    />\n                  }\n                />\n              </Item.Header>\n              <Item.Extra>\n                <Grid stackable>\n                {\n                  item.instances.map((instance, j) =>\n                    <Grid.Row columns={4} key={instance.instanceid}>\n                      <Grid.Column width={6}>\n                        <Input size='mini'\n                          fluid\n                          iconPosition='left'\n                          icon='at' placeholder='Company'\n                          onChange={this.handlecompanychange.bind(this,i,j)}\n                          id={'company-' + i + '-' + j} value={!instance.company ? '' : instance.company}\n                         />\n                      </Grid.Column>\n                      <Grid.Column width={4}>\n                        <Input size='mini'\n                          fluid\n                          placeholder='yyyy-mm'\n                          onChange={this.handledatechange.bind(this,'datefrom',i,j)}\n                          id={'datefrom-' + i + '-' + j}\n                          value={!instance.datefrom ? '' : instance.datefrom}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={4}>\n                        <Input size='mini'\n                          fluid\n                          placeholder='yyyy-mm'\n                          onChange={this.handledatechange.bind(this,'dateto',i,j)}\n                          id={'dateto-' + i + '-' + j}\n                          value={!instance.dateto ? '' : instance.dateto}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={1}\n                        verticalAlign='middle' textAlign='left'>\n                        {\n                          instance.company !== '' && \n                          <Popup className='popup' inverted flowing hoverable\n                            content='Delete row'\n                            trigger={\n                              <Icon name='delete' size='small' link\n                                inverted\n                                color='green'\n                                onClick={this.deletecareerrow.bind(this,item.id,instance.instanceid)}\n                              />\n                            }\n                          />\n                        }\n                      </Grid.Column>\n                    </Grid.Row>\n                  )\n                }\n                </Grid>\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        )\n    });\n\n    return (\n      <Item.Group divided>\n      {usercareerpanel}\n      </Item.Group>\n    );\n  }\n\n  async filterstatesdata(countrycode){\n    try{\n      const requeststr = this.state.apihost + '/gazetteer/states/' + countrycode\n      const response = await axios.get(requeststr);\n      console.log('get states [' + response.data['message'] + ']');\n      const rawstates = response.data['states'];\n      const states = rawstates.map((item) => (\n        {\n          key: item.id,\n          text: item.name,\n          value: item.name\n        }\n      ));\n\n      this.setState({states: states});\n    }\n    catch(err){\n      console.log('get states [' + err + ']');     \n    }  \n  }\n\n  selectgeo(event,data){\n    const field = data.name;\n    if(field === 'country'){\n      const selectedcountry = data.value;\n      let selectedarr = this.state.countries.filter(suggest => suggest.value.includes(selectedcountry))[0];\n      const selectedcountrycode = selectedarr.key\n      this.setState({countryname: selectedcountry});\n      this.setState({countrycode: selectedcountrycode});\n      this.filterstatesdata(selectedcountrycode);\n    }\n    else if(field === 'state'){\n      const selectedstate = data.value;\n      console.log(selectedstate);\n      this.setState({statename: selectedstate});\n    }\n  }\n\n  async loadlocationdata(){\n    try{\n      const requeststr = this.state.apihost + '/gazetteer/countries'\n      const response = await axios.get(requeststr);\n      console.log('get countries [' + response.data['message'] + ']');\n      const rawcountries = response.data['countries'];\n      const countries = rawcountries.map((item) => (\n        {\n          key: item.id,\n          text: item.name,\n          value: item.name\n        }\n      ));\n\n      this.setState({countries: countries});\n    }\n    catch(err){\n      console.log('get countries [' + err + ']');     \n    }  \n  }\n\n  updatename(event,data){\n    const value = data.value;\n    if(data.name === 'firstname'){\n      this.setState({firstname: value});\n      if(!validator.isAlpha(value) || value === ''){\n        this.setState({isfirstnamevalid: false});\n      }\n      else{\n        this.setState({isfirstnamevalid: true});        \n      }\n    }\n    else if(data.name === 'lastname'){\n      this.setState({lastname: value});\n      if(!validator.isAlpha(value) || value === ''){\n        this.setState({islastnamevalid: false});\n      }\n      else{\n        this.setState({islastnamevalid: true});        \n      }\n    }\n  }\n\n  async updateuserinfo(event){\n    if(this.state.isfirstnamevalid && this.state.islastnamevalid){\n\n      try{\n        const requeststr = this.state.apihost + '/users'\n        const response = await axios.post(requeststr,\n          {\n            firstname:this.state.firstname,\n            lastname:this.state.lastname,\n            countrycode:this.state.countrycode,\n            statename:this.state.statename\n          }, \n          {\n            headers: {\n              'crossDomain': true,\n              \"content-type\": \"application/json\",\n              \"access-token\": this.state.token\n            }\n          }\n        );\n        console.log('update user info [' + response.data['message'] + ']');\n        this.setState({userinfoupdateok: true});\n        this.setState({userinfoupdatemsg: 'Update successful'});\n      }\n      catch(err){\n        console.log('update user info [' + err + ']');     \n        this.setState({userinfoupdateok: false});\n        this.setState({userinfoupdatemsg: 'Update error'});\n      }  \n    }\n    else{\n      this.setState({userinfoupdateok: false});\n      this.setState({userinfoupdatemsg: 'Incomplete information'});\n    }\n  }\n\n  loadusercompetency(){\n    try{\n      const requeststr = this.state.apihost + '/users/competency'\n      const response = axios.get(requeststr,\n        {\n          headers: {\n            \"content-type\": \"application/json\",\n            \"access-token\": this.state.token\n          }\n        }\n      );\n      console.log('get user competency [' + response.data['message'] + ']');\n      \n\n      this.setState({countries: response.data['competency']});\n    }\n    catch(err){\n      console.log('get user competency [' + err + ']');     \n    }  \n  }\n\n  async componentDidMount() {\n    await this.loadlocationdata();\n    await this.validateusertoken();\n    await this.loadusercompetency();\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <div\n        className={isMobile ? \"navheader mobile\" : \"navheader\"} \n        > \n          <Grid doubling stackable>\n            <Grid.Row columns={2}>\n              <Grid.Column width={6} verticalAlign='middle' textAlign='left'\n                style={{ paddingTop: '0.75em'}}\n              >\n                <span style={{ paddingLeft: '0.2em'}}></span>\n                <Image as='a' spaced='left' inline\n                href='./' size='tiny' src='./logo_small.png'/>\n                <span className=\"menulink\">\n                  <a href=\"/home\" >\n                    <Icon name='caret square left'/>HOME\n                  </a>\n                </span>\n                <span className=\"menulink\">\n                  <a href=\"/home\" onClick={this.logout.bind(this)}>\n                    LOGOUT\n                  </a>\n                </span>\n              </Grid.Column>\n              <Grid.Column>                \n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n        <div\n          className={isMobile ? \"bodymain mobile\" : \"bodymain\"}\n        >\n          <Grid columns='equal' doubling stackable columns={2}>\n            <Grid.Row>              \n              <Grid.Column>\n                <Segment raised>\n                  <Grid columns='equal' doubling stackable>\n                    <Grid.Row columns={3}>\n                      <Grid.Column width={4} verticalAlign='middle'>\n                        <b>Full name</b>\n                      </Grid.Column>\n                      <Grid.Column width={6}>\n                        <Input fluid placeholder='First name'\n                          name='firstname'\n                          value={this.state.firstname}\n                          onChange={this.updatename.bind(this)}\n                          error={!this.state.isfirstnamevalid}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={6}>\n                        <Input fluid placeholder='Last name'\n                          name='lastname'\n                          value={this.state.lastname} \n                          onChange={this.updatename.bind(this)}\n                          error={!this.state.islastnamevalid}\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns={2}>\n                      <Grid.Column width={4} verticalAlign='middle'>\n                        <b>Email</b>\n                      </Grid.Column>\n                      <Grid.Column width={12}>\n                        <Input fluid disabled\n                          name='email'\n                          value={this.state.email} \n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns={2}>\n                      <Grid.Column width={4} verticalAlign='middle'>\n                        <b>Location</b>\n                      </Grid.Column>\n                      <Grid.Column width={6}>\n                        <Dropdown fluid\n                          placeholder='Country'\n                          name='country' \n                          search selection \n                          value={this.state.countryname}\n                          options={this.state.countries}\n                          onChange={this.selectgeo.bind(this)}\n                          noResultsMessage='Nothing found'\n                          selectOnBlur={false}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={6}>\n                        <Dropdown fluid\n                          placeholder='State'\n                          name='state' \n                          search selection \n                          value={this.state.statename}\n                          options={this.state.states}\n                          onChange={this.selectgeo.bind(this)}\n                          noResultsMessage='Select country'\n                          selectOnBlur={false}\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns={2}>\n                      <Grid.Column width={6}>\n                        <Button className='action'\n                          onClick={this.updateuserinfo.bind(this)}\n                        >\n                          <Icon name='save' />UPDATE\n                        </Button>\n                      </Grid.Column>\n                      <Grid.Column width={10} textAlign='left'>\n                      {\n                        this.state.userinfoupdatemsg !== '' &&\n                        <Message size='small' compact\n                          negative={!this.state.userinfoupdateok}\n                          positive={this.state.userinfoupdateok}\n                          style={{paddingTop:'0.7em',paddingBottom:'0.7em'}}\n                        >\n                          <Message.Content>\n                            {this.state.userinfoupdatemsg}\n                          </Message.Content>\n                        </Message>\n                      }\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment raised>\n                  bla bla\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>  \n            <Grid.Row stretched>\n              <Grid.Column>\n              <Segment raised>\n                {this.renderusercareer()}\n              </Segment>\n              </Grid.Column>\n            </Grid.Row>          \n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Profile;\n","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\public-route.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\private-route.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\common.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Login.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Home.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\App.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"53","replacedBy":"59"},{"ruleId":"55","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":490,"column":52,"nodeType":"63","endLine":490,"endColumn":63},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],["64"],["65"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]