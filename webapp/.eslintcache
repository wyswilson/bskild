[{"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\index.js":"1","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\reportWebVitals.js":"2","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\field.js":"3","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Profile.js":"4","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\public-route.js":"5","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\private-route.js":"6","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\common.js":"7","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Login.js":"8","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Home.js":"9","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\App.js":"10"},{"size":303,"mtime":1614248851681,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1232,"mtime":1589192469066,"results":"14","hashOfConfig":"12"},{"size":11818,"mtime":1614577953254,"results":"15","hashOfConfig":"12"},{"size":403,"mtime":1614249699562,"results":"16","hashOfConfig":"12"},{"size":439,"mtime":1588768401993,"results":"17","hashOfConfig":"12"},{"size":703,"mtime":1589377015363,"results":"18","hashOfConfig":"12"},{"size":5160,"mtime":1614577824215,"results":"19","hashOfConfig":"12"},{"size":40055,"mtime":1614651175566,"results":"20","hashOfConfig":"12"},{"size":980,"mtime":1614250351052,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"nrgzpo",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\index.js",[],["46","47"],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\reportWebVitals.js",[],["48","49"],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\field.js",[],["50","51"],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Profile.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\public-route.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\private-route.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\utils\\common.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Login.js",[],"C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\Home.js",["52"],"import React from 'react';\nimport axios from 'axios';\nimport { isMobile } from 'react-device-detect';\nimport { getToken, removeUserSession } from './utils/common';\n\nimport { Rating, Message, Loader, Image, Input, Modal, Table, Popup, List, Button, Label, Icon, Dropdown, Header, Grid, Card } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport scrollToComponent from 'react-scroll-to-component';\nimport validator from 'validator'\nimport queryString from 'query-string'\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      apihost: 'http://bskild.xyz/v1',\n      //apihost: 'http://127.0.0.1:8888/v1',      \n      token: getToken(),\n      userid:'',\n      searchquery: '',\n      selectedid: '',\n      selectedtype: '',\n      selectedvalue: '',\n      dropdownoptions: [],\n      rawresponse:[],\n      serp:'',\n      selectedoccupationskills: [],\n      selectedskilloccupations: [],\n      selectedoccupationrelated: [],\n      helpwithskill: '',\n      helpwithoccupation: '',\n      inquireroleopen: false,\n      inquirecustommessage: '',\n      confirmformforwarded:false,\n      occupationsindemand: '',\n      mainpageloading: false,\n      isemailvalid: true,\n      isnamevalid: true,\n      iscompvalid: true,\n      ispagefav: false,\n      userfavs: []\n    };\n  }  \n\n  scrollto(refobj){\n    if(this.state.serp === ''){\n      scrollToComponent(refobj,{align: 'top'});\n    }\n    else{\n      window.location.href = '/'; \n    }\n\n  }\n\n  async validatetoken(){\n    if(this.state.token){\n      try{\n        const requeststr = this.state.apihost + '/users'\n        const response = await axios.get(requeststr,\n          {\n            headers: {\n              \"content-type\": \"application/json\",\n              \"access-token\": this.state.token\n            }\n          }\n        );\n        console.log('validate user [' + response.data['message'] + ']');\n        await this.setState({userid: response.data['users'][0]['userid']})\n        await this.setState({userfavs: response.data['users'][0]['occupations']})\n      }\n      catch(err){\n        if(err.response){\n          if(err.response.status === 401){\n            removeUserSession();\n            this.props.history.push('/home');\n          }\n          else{\n            console.log('validate user [' + err.response + ']');\n          }\n        }\n        \n      }  \n    }\n  }\n\n  async componentDidMount() {\n    await this.validatetoken();\n\n    const queryobj = queryString.parse(window.location.search);\n    if(queryobj['q'] !== '' && queryobj['m'] === 's'){\n      this.suggestionselected('skills',queryobj['q']);\n    }\n    else if(queryobj['q'] !== '' && queryobj['m'] === 'o'){\n      this.suggestionselected('occupations',queryobj['q']);\n    }\n    else{\n       await this.loadhighdemandoccupations();\n    }\n   \n  }\n\n  renderoccupationsindemand(occupations){\n    const indemandrender = occupations.map((item) => (\n            <Card key={item.id} raised fluid={false}>\n              <Card.Content>\n                <Label corner='right'>\n                  <Icon name='user outline' />\n                </Label>\n                <Card.Header className='actionlink' onClick={this.suggestionselected.bind(this,'occupations',item.id)}>\n                  <a href={ '/home?q=' + item.id + '&m=o' }>\n                  {item.name}\n                  </a>\n                </Card.Header>\n                <Card.Meta>role</Card.Meta>\n              </Card.Content>\n              <Card.Content>\n              {\n                item.desc.split(\" \").splice(0,20).join(\" \") + '...'\n              }\n              </Card.Content>\n            </Card>\n        ));\n\n    this.setState({occupationsindemand: indemandrender});\n  }\n\n  async loadhighdemandoccupations(){\n    var requeststr = this.state.apihost + '/occupations/highdemand?3'\n    //console.log('fetch indemand occupations [' + requeststr + ']');\n    try{\n      const response = await axios.get(requeststr);\n      console.log('fetch indemand occupations [' + response.data['message'] + ']');\n      const occupationsindemand = response.data['occupations'];\n      this.renderoccupationsindemand(occupationsindemand);\n    }\n    catch(err){\n      console.log('fetch indemand occupations [' + err + ']');     \n    }\n  }\n\n  async searchskills(query,mode){\n    let suggestions = [];\n\n    var skillrequeststr = this.state.apihost + '/skills/' + query + '?' + mode\n    //console.log('search skills [' + skillrequeststr + ']');\n    try{\n      const response = await axios.get(skillrequeststr);\n      console.log('search skills [' + response.data['message'] + ']');\n      suggestions = response.data['skills'];\n      if(mode === 'full'){\n        const skillname = suggestions[0]['name'];\n        this.setState({selectedvalue: skillname});\n        this.setState({searchquery: skillname});\n      }\n    }\n    catch(err){\n      console.log('search skills [' + err + ']');     \n    }\n    return suggestions;\n  }\n\n  async searchoccupations(query,mode){\n    let suggestions = [];\n\n    var occupationrequeststr = this.state.apihost + '/occupations/' + query + '?' + mode\n    //console.log('search occupations [' + occupationrequeststr + ']');\n    try{\n      const response = await axios.get(occupationrequeststr);\n      console.log('search occupations [' + response.data['message'] + ']');\n      suggestions = response.data['occupations'];\n      if(mode === 'full'){\n        const occupationname = suggestions[0]['name'];\n        this.setState({selectedvalue: occupationname});\n        this.setState({searchquery: occupationname});\n      }\n    }\n    catch(err){\n      console.log('search occupations [' + err + ']');     \n    }\n    return suggestions;\n  }\n\n  async searchboth(query){\n    const options1 = await this.searchoccupations(query,'lite');\n    await this.updatesuggestions(options1,'occupations');\n    const options2 = await this.searchskills(query,'lite');\n    await this.updatesuggestions(options2,'skills');\n    await this.refreshresults('lite');\n    this.setState({mainpageloading: false});\n  }\n\n  searchkeywords(event, data){\n    this.resetsuggestions();\n    const keywords = data.searchQuery;\n    console.log(\"search keywords [\" + keywords + \"]\");\n    this.setState({searchquery: keywords});\n    if(keywords.length > 3){\n      this.setState({mainpageloading: true});\n      this.searchboth(keywords);\n    }\n    else if(keywords.length === 0){\n      window.location.href = '/'; \n    }\n  }\n\n  updatesuggestions(suggestions,type){\n    const updatedsuggestions = _.map(suggestions, (item) => (\n      {\n        key: item.id,\n        text: item.name,\n        value: item.name,\n        desc: item.desc,\n        alts: item.alternatives ? item.alternatives : [],\n        content: (\n          <Header size='small' icon={type === 'occupations' ? 'user outline'  : 'list'} content={item.name} subheader={item.desc.split(\" \").splice(0,20).join(\" \") + '...'} />\n        ),\n        type: type\n      }\n    ));\n    this.setState({rawresponse: this.state.rawresponse.concat(suggestions)});\n    this.setState({dropdownoptions: this.state.dropdownoptions.concat(updatedsuggestions)});\n  }\n\n  resetsuggestions(){\n    this.setState({rawresponse: []});\n    this.setState({dropdownoptions: []});\n    this.setState({serp: ''});\n    this.setState({helpwithskill: ''});\n    this.setState({helpwithoccupation: ''});\n    this.setState({inquirecustommessage: ''});\n    this.setState({inquireroleopen: false});\n  }\n\n  async selectsuggestion(event, data){\n    const fieldname = data.name;\n    if(fieldname === 'keywords'){\n      const keywords = data.value;\n      this.setState({searchquery: keywords});\n      const suggestions = this.state.dropdownoptions;\n\n      let selectedarr = suggestions.filter(suggest => suggest.value.includes(keywords))[0];\n      const selectedid = selectedarr.key;\n      const selectedtype = selectedarr.type;\n      const selectedvalue = selectedarr.value;\n      console.log(\"selected [\" + selectedtype + \"][\" + selectedid + \"][\" + selectedvalue + \"]\");\n\n      this.suggestionselected(selectedtype,selectedid);\n      let shortentype = 'o';\n      if(selectedtype === 'skills'){\n        shortentype = 's';\n      }\n      window.location.href = '/home?q=' + selectedid + '&m=' + shortentype; \n    }\n  }\n\n  checkisfav(selectedid){\n    const obj = this.state.userfavs.find(o => o.id === selectedid);\n    if(obj){\n      this.setState({ispagefav: true});\n    }\n    else{\n      this.setState({ispagefav: false});\n    }\n  }\n\n  async suggestionselected(type,id){\n    this.setState({mainpageloading: true});\n\n    await this.setState({selectedid: id});\n    await this.setState({selectedtype: type});\n\n    await this.checkisfav(id);\n\n    if(type === 'skills'){\n      const options = await this.searchskills(id,'full');\n      await this.resetsuggestions();\n      await this.updatesuggestions(options,'skills');\n      await this.lookupoccupationsforskill(id);\n      await this.refreshresults('full');\n\n    }\n    else if(type === 'occupations'){\n      const options = await this.searchoccupations(id,'full');\n      await this.resetsuggestions();\n      await this.updatesuggestions(options,'occupations');\n      await this.lookupskillsforoccupation(id);\n      await this.lookuprelatedoccupations(id);\n      await this.refreshresults('full');\n    }\n    this.setState({mainpageloading: false});\n    const pagetitlestr = this.state.selectedvalue + ' by bSkild';\n    document.title = pagetitlestr;\n  }\n\n  async lookupoccupationsforskill(id){\n    var requeststr = this.state.apihost + '/skills/' + id + '/occupations'\n    //console.log('search skill occupations [' + requeststr + ']');\n    try{\n      const response = await axios.get(requeststr);\n      console.log('search skill occupations [' + response.data['message'] + ']');\n      const occupations = response.data['skills'][0]['occupations'];\n      this.setState({selectedskilloccupations: occupations});\n    }\n    catch(err){\n      console.log('search skill occupations [' + err + ']');     \n    }\n  }\n\n  async lookupskillsforoccupation(id){\n    var requeststr = this.state.apihost + '/occupations/' + id + '/skills?15'\n    //console.log('search occupation skills [' + requeststr + ']');\n    try{\n      const response = await axios.get(requeststr);\n      console.log('search occupation skills [' + response.data['message'] + ']');\n      const skills = response.data['occupations'][0]['skills'];\n      this.setState({selectedoccupationskills: skills});\n    }\n    catch(err){\n      console.log('search occupation skills [' + err + ']');     \n    }\n  }\n\n  async lookuprelatedoccupations(id){\n    var requeststr = this.state.apihost + '/occupations/' + id + '/related?5'\n    //console.log('search related occupations [' + requeststr + ']');\n    try{\n      const response = await axios.get(requeststr);\n      console.log('search related occupations [' + response.data['message'] + ']');\n      const occupations = response.data['occupations'];\n      this.setState({selectedoccupationrelated: occupations});\n    }\n    catch(err){\n      console.log('search related occupations [' + err + ']');     \n    }\n  }\n\n  async setskillsneedhelp(selectedskillid){\n    await this.setState({helpwithskill: selectedskillid});  \n    await this.inquirehelpmodalskills(true,this.state.selectedid,this.state.selectedvalue);\n   }\n\n  async inquirehelpmodalskills(state,occupationid,name){\n    await this.setState({helpwithoccupation: occupationid});\n    const custommessage = 'I\\'m interested in upskilling a specific skill for [' + name + ']';\n    this.inquirehelpmodal(custommessage,state);\n  }\n\n  async inquirehelpmodaloccupation(state,occupationid,name){\n    await this.setState({helpwithoccupation: occupationid});\n    await this.setState({helpwithskill: ''}); \n\n    const custommessage = 'I\\'m interested in reskilling from [' + this.state.selectedvalue + '] to [' + name + ']';\n    this.inquirehelpmodal(custommessage,state);\n  }\n\n  async inquirehelpmodal(message,state){\n    await this.setState({inquirecustommessage: message});\n    await this.setState({inquireroleopen: state});\n  }\n\n  async inquiryforwardedmodal(state){\n    await this.setState({inquirecustommessage: ''});\n    await this.setState({confirmformforwarded: state});\n  }\n\n  validateemail(event){\n    const email = document.getElementById('inquiryemail').value;\n    this.checkemail(email);\n  }\n\n  async checkemail(email){\n    if(email !== '' && validator.isEmail(email)) { \n      await this.setState({isemailvalid: true});\n    }\n    else{\n      await this.setState({isemailvalid: false});     \n    }\n  }\n\n  validatename(event){\n    const fname = document.getElementById('inquirynamefirst').value;\n    const lname = document.getElementById('inquirynamelast').value;\n    this.checkname(fname,lname);\n  }\n\n  async checkname(fname,lname){\n    if(fname !== '' && lname !== '' &&  validator.isAlpha(fname) && validator.isAlpha(lname) ) { \n      await this.setState({isnamevalid: true});\n    }\n    else{\n      await this.setState({isnamevalid: false});     \n    }\n  }\n\n  async checkcompany(cname){\n    if(cname !== ''){\n      await this.setState({iscompvalid: true});      \n    }\n    else{\n      await this.setState({iscompvalid: false});      \n    }\n  }\n\n  async forwardinquiry(){\n    const fname = document.getElementById('inquirynamefirst').value;\n    const lname = document.getElementById('inquirynamelast').value;\n    const email = document.getElementById('inquiryemail').value;\n    const company = document.getElementById('inquirycomp').value;\n\n    await this.checkname(fname,lname);\n    await this.checkcompany(company);\n    await this.checkemail(email);\n    \n    if(this.state.isemailvalid && this.state.isnamevalid && this.state.iscompvalid) { \n      console.log(\"forward inquiry\");\n      this.setState({inquireroleopen: false});\n      this.setState({confirmformforwarded: true});\n\n      this.submitinquiry(fname,lname,email,company,this.state.helpwithoccupation,this.state.helpwithskill);\n\n      const custommessage = 'Thank you. We\\'ll be in touch as soon as possible.';\n      this.setState({inquirecustommessage: custommessage});\n    }\n  }\n\n  async submitinquiry(fname,lname,email,company,occupation,skill){\n\n    try{\n      const response = await axios.post(this.state.apihost + '/inquiries', \n        {\n          fname:fname,\n          lname:lname,\n          email:email,\n          company:company,\n          occupation:occupation,\n          skill:skill\n        }, \n        {\n          headers: {\n            'crossDomain': true,\n            \"content-type\": \"application/json\"\n          }\n        }\n      )\n      console.log('submit inquiry [' + response.data['message'] + ']');\n    }\n    catch(err){\n      console.log('submit inquiry [' + err + ']');     \n    }\n  }\n  \n  requestdemo(){\n    const custommessage = 'I\\'m interested in finding out more about how bSkild can help me';\n    this.inquirehelpmodal(custommessage,true);\n  }\n\n  async toggleuserfav(){\n\n    if(this.state.userid !== ''){\n      try{\n        const response = await axios.post(this.state.apihost + '/users/favs', \n          {\n            conceptId:this.state.selectedid,\n            conceptType:'occupations'\n          }, \n          {\n            headers: {\n              'crossDomain': true,\n              \"content-type\": \"application/json\",\n              \"access-token\": this.state.token\n            }\n          }\n        )\n        console.log('set user fav [' + response.data['message'] + ']');\n      }\n      catch(err){\n        console.log('set user fav [' + err + ']');     \n      }    \n    }\n    else{\n\n    }\n  }\n\n  renderextracontent(mode,type,id,value){\n    let render = ''; \n    if(mode === 'full' && type === 'occupations'){\n      let renderskills = this.state.selectedoccupationskills.map((skillitem) => (\n            <Table.Row key={'row' + skillitem.id}>\n              <Table.Cell className='actionlink' key={'row.cell1' + skillitem.id} selectable onClick={this.suggestionselected.bind(this,'skills',skillitem.id)}>\n                <a href={ '/home?q=' + skillitem.id + '&m=s' }>\n                  <Popup content={skillitem.optionality + ' skill'}\n                    trigger={<Icon name='list' color={skillitem.optionality !== 'optional' ? 'red'  : 'green'}/>}\n                  />\n                  {skillitem.name}\n                </a>\n              </Table.Cell>\n              <Table.Cell key={'row.cell2' + skillitem.id}>\n                {skillitem.reusability} {skillitem.type}\n              </Table.Cell>\n              <Table.Cell key={'row.cell3' + skillitem.id} width={5}>\n                <Button icon='mail' content='UPSKILL NOW'\n                  className='action'\n                  onClick={this.setskillsneedhelp.bind(this,skillitem.id)}\n                />                \n              </Table.Cell>\n            </Table.Row>     \n        ));\n\n      let renderroles = '';\n      if(this.state.selectedoccupationrelated.length > 0){\n        renderroles = this.state.selectedoccupationrelated.map((occupationitem) => (\n            <Table.Row key={'row' + occupationitem.id}>\n              <Table.Cell className='actionlink' key={'row.cell1' + occupationitem.id} selectable onClick={this.suggestionselected.bind(this,'occupations',occupationitem.id)}>\n                <a href={ '/home?q=' + occupationitem.id + '&m=o' }><Icon name='user outline'/>{occupationitem.name}</a>\n              </Table.Cell>\n              <Table.Cell key={'row.cell2' + occupationitem.id} width={5}>\n                <Button icon='mail' content='RESKILL NOW'\n                  className='action'\n                  onClick={this.inquirehelpmodaloccupation.bind(this,true,occupationitem.id,occupationitem.name)}\n                />\n              </Table.Cell>\n            </Table.Row>  \n             ));  \n      }      \n     \n      render = (\n      <div>\n        <Table celled striped compact>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan='3'><Header as='h4'>Top roles related to {value}</Header></Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { renderroles !== '' ? renderroles : <Table.Row><Table.Cell>No related roles</Table.Cell></Table.Row>}\n          </Table.Body>         \n        </Table>\n        <Table celled striped compact>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan='3'><Header as='h4'>Main skills for a {value}</Header></Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {renderskills}\n          </Table.Body>         \n        </Table>\n      </div>\n      );\n            \n    }\n    else if(mode === 'full' && type === 'skills'){\n      let renderroles = this.state.selectedskilloccupations.map((occupationitem) => (\n            <Table.Row key={'row' + occupationitem.id}>\n              <Table.Cell className='actionlink' key={'row.cell1' + occupationitem.id} selectable onClick={this.suggestionselected.bind(this,'occupations',occupationitem.id)}>\n                <a href={ '/home?q=' + occupationitem.id + '&m=o' }><Icon name='user outline'/>{occupationitem.name}</a>\n              </Table.Cell>\n              <Table.Cell key={'row.cell2' + occupationitem.id}>\n                {occupationitem.optionality}\n              </Table.Cell>\n            </Table.Row> \n             ));\n\n      render = (\n        <Table celled striped compact>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan='2'><Header as='h4'>Roles that require the skill</Header></Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {renderroles}\n          </Table.Body>    \n        </Table>\n      );\n    }\n    else{\n      render = (\n          ''\n        );\n    }\n    return render;\n  }\n\n  refreshresults(mode){\n    console.log(\"loading results\");\n\n    let serprefreshed = [];\n    this.state.dropdownoptions.forEach(function(item) {\n      serprefreshed.push(\n             <Card key={item.key} raised\n              fluid={mode !== 'lite' ? true : false}\n             >\n              <Card.Content>\n                <Label corner='right'>\n                  <Icon\n                    name={item.type === 'occupations' ? 'user outline'  : 'list'}\n                  />\n                </Label>\n                <Card.Header className='actionlink'>\n                  <a  onClick={this.suggestionselected.bind(this,item.type,item.key)}\n                   href={ item.type === 'occupations' ? '/home?q=' + item.key + '&m=o'  : '/home?q=' + item.key + '&m=s' }>\n                  {item.value}\n                  </a>\n                  { ' ' }\n                  {\n                    item.type === 'occupations' && mode !== 'lite' &&\n                    !this.state.ispagefav &&\n                    <Icon.Group size='small'\n                       onClick={this.toggleuserfav.bind(this)}\n                    >\n                      <Icon name='clipboard outline'/>\n                      <Icon corner name='add' />\n                    </Icon.Group>\n                  }\n                  {\n                    item.type === 'occupations' && mode !== 'lite' &&\n                    this.state.ispagefav &&\n                    <Icon.Group size='small'\n                       onClick={this.toggleuserfav.bind(this)}\n                    >\n                      <Icon name='clipboard'/>\n                      <Icon corner name='add' />\n                    </Icon.Group>\n                  }\n                </Card.Header>\n                <Card.Meta>\n                  {item.type === 'occupations' ? 'role'  : 'skill'}\n                </Card.Meta>\n              </Card.Content>\n              <Card.Content style = {mode !== 'lite' ? { paddingLeft: 0, paddingRight: 0 } : {}}>\n              {\n                mode !== 'lite' && \n                <Table celled striped>\n                  <Table.Header>\n                    <Table.Row key='descriptionheader'>\n                      <Table.HeaderCell>\n                        <Header as='h4'>\n                          { item.type === 'occupations' ? 'Description'  : 'Description'}\n                        </Header>\n                      </Table.HeaderCell>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                    <Table.Row key='descriptionrow'>\n                      <Table.Cell key='descriptioncell'>\n                      {item.desc}\n                      <br/><br/>\n                      {\n                        mode !== 'lite' && item.alts[0] !== '' &&\n                        <b>Also known as: </b>\n                      }\n                      {\n                        mode !== 'lite' && item.alts[0] !== '' &&\n                        item.alts.map(alt => (\n                          <span key={'alt_' + alt}>{alt}; </span>\n                        ))\n                      }\n                      </Table.Cell>\n                    </Table.Row>\n                  </Table.Body>\n                </Table>\n              }\n              {\n                mode === 'lite' &&\n                item.desc.split(\" \").splice(0,20).join(\" \") + '...'\n              }\n              { \n                this.renderextracontent(mode,item.type,item.key,item.value) \n              }\n              </Card.Content>\n            </Card>\n        );\n    },this);\n    this.setState({serp: serprefreshed});\n  }\n\n  render() {\n    let results = '';\n    if(!this.state.mainpageloading && this.state.dropdownoptions.length > 0){\n      results = (\n        <div\n          className={isMobile ? \"bodymain mobile\" : \"bodymain\"}\n        > \n          <Card.Group stackable doubling>\n            {this.state.serp}\n          </Card.Group>\n        </div>\n      );\n    }\n    else if(!this.state.mainpageloading && this.state.selectedid === ''){\n      results = (\n        <div>\n          <div\n            className={isMobile ? \"bodyapex mobile\" : \"bodyapex\"}\n          >\n            <Grid>\n              <Grid.Row columns={2} textAlign='left'>\n                <Grid.Column width={10}>\n                  <Header as='h2' style={ isMobile ? { fontSize: '30px' } : { fontSize: '40px' }} className=\"fontdark\">\n                    Be skilled where it matters\n                  </Header>\n                  <p className=\"fontdark\" style={{ fontSize: '15px' }}>\n                    Uncover opportunities to upskill or reskill to future-proof yourself and\n                    <br/>your workforce using a unique blend of data and AI\n                  </p>\n                  <Button icon='toggle down' content='FIND OUT MORE'\n                      className='action'\n                      size='large' onClick={this.scrollto.bind(this,this.about)}/>\n\n                </Grid.Column>\n                <Grid.Column>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </div>\n          <div\n            className={isMobile ? \"bodydark mobile\" : \"bodydark\"}\n            ref={(div) => { this.about = div; }}\n          >\n            <Grid celled='internally' columns='equal' doubling stackable>\n              <Grid.Row textAlign='left'>\n                <Grid.Column>\n                  <Header as='h4' style={{ fontSize: '20px' }} className=\"fontlight\">\n                    New roles and skills continue to emerge while existing ones evolve or become redundant\n                  </Header>\n                  <p className=\"fontlight\" style={{ fontSize: '15px' }}>\n                  Employers and workers do not have the tools and the data to deal with the changes, which results in mismatch between supply and demand in the labour market\n                  </p>\n                </Grid.Column>\n                <Grid.Column verticalAlign=\"middle\">\n                  <List key='problemstat2' floated=\"left\" className=\"fontlight\" style={{ fontSize: '15px' }}>\n                    <List.Item key='problemstat21'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                      Throughout 2020 in the US, <a href='https://www.forbes.com/sites/ryancraig/2020/07/17/fixing-the-worlds-most-inefficient-market/' target=\"_blank\" rel=\"noreferrer\">tens of millions of workers were unemployed while millions of jobs go unfilled</a>.\n                      </List.Content>\n                    </List.Item>\n                    <List.Item key='problemstat23'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                        It is estimated that <a href='https://www.forbes.com/sites/kenrapoza/2020/05/15/some-42-of-jobs-lost-in-pandemic-are-gone-for-good/' target=\"_blank\" rel=\"noreferrer\">some 40% of the jobs</a> lost in the US during the pandemic may never come back.\n                      </List.Content>\n                    </List.Item>\n                    <List.Item key='problemstat22'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                      By 2022, it is expected that <a href='https://www.bcg.com/en-au/publications/2020/fixing-global-skills-mismatch' target=\"_blank\" rel=\"noreferrer\">27% of available jobs</a> will be in roles that do not yet exist.\n                      </List.Content>\n                    </List.Item>\n                  </List>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </div>\n\n          <div\n            className={isMobile ? \"bodylight mobile\" : \"bodylight\"}\n          >\n            <Grid celled='internally' columns='equal' doubling stackable>\n              <Grid.Row textAlign='left'>\n                <Grid.Column>\n                  <Header as='h4' style={{ fontSize: '20px' }} className=\"fontdark\">\n                    Improving productivity and retention requires employees to be continuously learning and growing\n                  </Header>\n                  <p className=\"fontdark\" style={{ fontSize: '15px' }}>\n                  Cost of maintaining a specialist function to identify and fulfill development and progression opportunities can be prohibitive for small to medium sized employers\n                  </p>\n                </Grid.Column>\n                <Grid.Column verticalAlign=\"middle\">\n                  <List key='problemstat1' floated=\"left\" className=\"fontdark\" style={{ fontSize: '15px' }}>\n\n                    <List.Item key='problemstat11'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                        The average cost of losing an employee is <a href='https://www.benefitnews.com/news/avoidable-turnover-costing-employers-big' target=\"_blank\" rel=\"noreferrer\">about 33% of their annual salary</a>.\n                      </List.Content>\n                    </List.Item>\n\n                    <List.Item key='problemstat12'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                        Organisations who are committed to talent mobility (through workforce repurposing) <a href='https://hbr.org/2016/05/dont-underestimate-the-power-of-lateral-career-moves-for-professional-growth' target=\"_blank\" rel=\"noreferrer\">performs better financially</a>.\n                      </List.Content>\n                    </List.Item>\n\n                    <List.Item key='problemstat13'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                        Employees who don't see a clear progression from their current roles are <a href='https://hbr.org/2017/03/why-do-employees-stay-a-clear-career-path-and-good-pay-for-starters' target=\"_blank\" rel=\"noreferrer\">more likely to leave</a>.\n                      </List.Content>\n                    </List.Item>\n\n                  </List>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </div>\n\n          <div\n            className={isMobile ? \"bodydark mobile\" : \"bodydark\"}\n          >\n            <Grid celled='internally' columns='equal' doubling stackable>\n              <Grid.Row textAlign='left'>\n                <Grid.Column>\n                  <Header as='h4' style={{ fontSize: '20px' }} className=\"fontlight\">\n                    Using a unique blend of data and AI, we help you uncover development and progression opportunities in your workforce and realise them\n                  </Header>\n                  <p className=\"fontlight\" style={{ fontSize: '15px' }}>\n                    <Button icon='search' content='TRY IT OUT NOW'\n                      className='action'\n                      size='large' onClick={this.scrollto.bind(this,this.trynow)}/>\n\n                  </p>\n                </Grid.Column>\n                <Grid.Column verticalAlign=\"middle\">\n                  <List key='valueprop' floated=\"left\" className=\"fontlight\" style={{ fontSize: '15px' }}>\n                    <List.Item key='valueprop1'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                       Understand the skills profile of your workforce in terms of niche vs transferable skills, hard-to-find skills, etc.\n                      </List.Content>\n                    </List.Item>\n\n                    <List.Item key='valueprop2'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                        Recommend opportunities to upskill based on the profile and follow up with options to fullfill the training needs.\n                      </List.Content>\n                    </List.Item>\n\n                    <List.Item key='valueprop3'>\n                      <List.Icon name='check circle' />\n                      <List.Content>\n                        Identify opportunities for lateral moves to put existing skills to good use and introduce new challenges to stimulate employees.\n                      </List.Content>\n                    </List.Item>\n                  </List>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </div>\n\n          <div className={isMobile ? \"bodylight mobile\" : \"bodylight\"}\n          >\n           <Grid celled='internally' columns='equal' doubling stackable>\n              <Grid.Column>\n                <Header as='h4' style={{ fontSize: '20px' }} className=\"fontdark\">\n                  Here are some of the most in-demand jobs in the last 3 days\n                </Header>\n                <Card.Group>\n                  {this.state.occupationsindemand}\n                </Card.Group>\n              </Grid.Column>\n            </Grid>\n          </div>\n\n        </div>\n      );\n    }\n    else if(!this.state.mainpageloading){\n      results = (\n        <div\n          className={isMobile ? \"bodymain mobile\" : \"bodymain\"}\n        >\n          <Message icon negative>\n            <Icon name='exclamation circle'/>\n            <Message.Content>\n              <Message.Header>Oops, there has been a problem.</Message.Header>\n              Please click <a href={ this.state.selectedtype === 'occupations' ? '/home?q=' + this.state.selectedid + '&m=o' : '/home?q=' + this.state.selectedid + '&m=s' }>here</a> to refresh the page.\n              If the problem persists, <a href='/'>return to the home page</a> and try again.\n            </Message.Content>\n          </Message>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n\n        <Modal\n          basic\n          onClose={this.inquirehelpmodal.bind(this,'',false)}\n          open={this.state.inquireroleopen}\n          centered={true}\n        >\n          <Header textAlign='left'>\n            {this.state.inquirecustommessage}\n          </Header>\n          <Modal.Content>\n            <Grid doubling stackable>\n              <Grid.Row columns={2} divided>\n                <Grid.Column>\n                  <Input id=\"inquirynamefirst\" labelPosition='left' \n                    type='text' placeholder='' size='large'\n                    onChange={this.validatename.bind(this)}\n                    error={!this.state.isnamevalid} fluid\n                  >\n                    <Label basic\n                      color={!this.state.isnamevalid ? 'red' : 'black'}\n                    >\n                    First name\n                    </Label>\n                    <input />\n                  </Input>\n                </Grid.Column>\n                <Grid.Column>\n                  <Input id=\"inquirynamelast\" labelPosition='left' \n                    type='text' placeholder='' size='large'\n                    onChange={this.validatename.bind(this)}\n                    error={!this.state.isnamevalid} fluid\n                  >\n                    <Label basic\n                      color={!this.state.isnamevalid ? 'red' : 'black'}\n                    >\n                      Last name\n                    </Label>\n                    <input />\n                  </Input>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row columns={2} divided>\n                <Grid.Column>\n                  <Input id=\"inquiryemail\" labelPosition='left' \n                    type='text' placeholder='' size='large'\n                    onChange={this.validateemail.bind(this)}\n                    error={!this.state.isemailvalid} fluid\n                  >\n                    <Label basic\n                      color={!this.state.isemailvalid ? 'red' : 'black'}\n                    >\n                      Email&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    </Label>\n                    <input />\n                  </Input>\n                </Grid.Column>\n                <Grid.Column>\n                  <Input id=\"inquirycomp\" labelPosition='left' \n                    type='text' placeholder='' size='large'\n                    error={!this.state.iscompvalid} fluid\n                  >\n                    <Label basic\n                      color={!this.state.iscompvalid ? 'red' : 'black'}\n                    >\n                      Company&nbsp;&nbsp;\n                    </Label>\n                    <input />\n                  </Input>\n                </Grid.Column>            \n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button className='action neg'\n              onClick={this.inquirehelpmodal.bind(this,'',false)}\n            >\n              <Icon name='remove' />CANCEL\n            </Button>\n            <Button className='action'\n              onClick={this.forwardinquiry.bind(this)}\n            >\n              <Icon name='checkmark' />SUBMIT\n            </Button>\n          </Modal.Actions>\n        </Modal>\n\n        <Modal\n          basic \n          onClose={this.inquiryforwardedmodal.bind(this,false)}          \n          open={this.state.confirmformforwarded}\n          size='tiny'\n          centered={false}\n        >\n          <Header textAlign='left'>\n            {this.state.inquirecustommessage}\n          </Header>\n          <Modal.Actions>\n            <Button className='action'\n              onClick={this.inquiryforwardedmodal.bind(this,false)}\n            >\n              <Icon name='checkmark' />OK\n            </Button>\n          </Modal.Actions>\n        </Modal>\n\n        <Loader active={this.state.mainpageloading} size='medium'>\n        Loading\n        </Loader>\n\n        <div\n          className={isMobile ? \"navheader mobile\" : \"navheader\"} \n          ref={(div) => { this.trynow = div; }}           \n        > \n          <Grid doubling stackable>\n            <Grid.Row columns={2}>\n              <Grid.Column width={6} verticalAlign='middle' textAlign='left'>\n                <span style={{ paddingLeft: '0.2em'}}></span>\n                <Image as='a' spaced='left' inline\n                href='./' size='tiny' src='./logo_small.png'/>\n                <span className=\"menulink\">\n                  <a href=\"#about\" onClick={this.scrollto.bind(this,this.about)}>\n                  ABOUT</a>\n                </span>\n                <span className=\"menulink\">\n                  <a href=\"#contact\" \n                  onClick={this.requestdemo.bind(this)}>\n                  CONTACT</a>\n                </span>\n                <span className=\"menulink\">\n                  {\n                    !this.state.token && \n                    <a href=\"/login\">LOGIN</a>\n                  }\n                  {\n                    this.state.token && \n                    <a href=\"/profile\">\n                      PROFILE\n                    </a>\n                  }\n                </span>\n              </Grid.Column>\n              <Grid.Column verticalAlign='top'>\n                <Dropdown name=\"keywords\" icon='search'\n                  style={ isMobile ? { paddingTop:'1em', fontSize:'15px', height:'3em', width: '22em'} : { paddingTop:'1em', fontSize:'15px',height:'3em',width: '34em'} }\n                  inline search selection allowAdditions\n                  additionLabel='Search with '\n                  minCharacters={2}\n                  selectOnBlur={false}\n                  searchQuery={this.state.searchquery}\n                  value={this.state.searchquery}\n                  options={this.state.dropdownoptions}\n                  noResultsMessage = \"No results found\"\n                  onSearchChange={this.searchkeywords.bind(this)}\n                  onChange={this.selectsuggestion.bind(this)}\n                  placeholder='What role or skill do you need help with?'\n                  onAddItem={this.searchkeywords.bind(this)}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n\n        { results }\n\n        {\n          !this.state.mainpageloading &&\n          <div\n            className={isMobile ? \"navfooter mobile\" : \"navfooter\"}\n          >\n            <List key='footer' horizontal verticalAlign=\"middle\">\n              <List.Item className=\"footheader\" style={{ fontSize: '15px' }}>\n                Copyright © 2021 bSkild. All Rights Reserved.\n              </List.Item>\n              <List.Item className=\"footheader\">\n\n              </List.Item>\n            </List>\n          </div>\n        }\n      </div>\n    )\n  }\n}\nexport default Home;\n","C:\\Users\\wyswi\\OneDrive\\Server\\bskild\\webapp\\src\\App.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"53","replacedBy":"59"},{"ruleId":"55","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":10,"nodeType":"63","messageId":"64","endLine":6,"endColumn":16},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],["65"],["66"],"no-unused-vars","'Rating' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]